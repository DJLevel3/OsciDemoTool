// wav2h.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <fstream>
#include <direct.h>
#include "AudioFile.h"

#define SAMPLES_PER_LINE 8

int main()
{
    const size_t size = 1024;
    char buffer[size];
    if (_getcwd(buffer, size) != NULL) {
        std::cout << "wav2h - starting in directory " << buffer << std::endl;
    }
    else {
        std::cerr << "Error getting current working directory" << std::endl;
        return 1;
    }

    AudioFile<double> audioFile;

    std::string infname;
    std::cout << "wav2h - [Enter input filename] ";
    std::cin >> infname;

    std::string outfname;
    std::cout << "wav2h - [Enter output filename] ";
    std::cin >> outfname;

    std::string temp;
    std::cout << "wav2h - [Enter \"O\" to overwrite the output file] ";
    std::cin >> temp;
    bool append = temp != "O";

    std::string name, nameUpper;
    std::cout << "wav2h - [Enter the name of the variable] ";
    std::cin >> name;
    nameUpper = name;
    std::transform(nameUpper.begin(), nameUpper.end(), nameUpper.begin(), ::toupper);

    std::cout << "wav2h - opening input file..." << std::endl;

    audioFile.load(infname);
    audioFile.printSummary();

    std::cout << "wav2h - normalizing input file..." << std::endl;

    int numSamples = audioFile.getNumSamplesPerChannel();
    int lOrR = audioFile.getNumChannels() > 1;
    double maxAbsVal = 0;
    double val = 0;
    // find max amplitude
    for (int i = 0; i < numSamples; i++) {
        val = std::max(std::abs(audioFile.samples[0][i]), std::abs(audioFile.samples[lOrR][i]));
        if (val > maxAbsVal) maxAbsVal = val;
    }
    // apply normalization
    for (int i = 0; i < numSamples; i++) {
        audioFile.samples[0][i] /= maxAbsVal;
        if (lOrR) audioFile.samples[1][i] /= maxAbsVal;
    }

    std::cout << "wav2h - opening output file..." << std::endl;

    std::ofstream outFile;
    std::ostream *outStream;

    bool withCout = false;
    
    if (append) {
        outFile.open(outfname, std::ofstream::out | std::ofstream::app);
        if (!outFile.is_open()) {
            std::cout << "wav2h - output file not open, printing to console instead";
            outStream = &std::cout;
            withCout = true;
        }
        else outStream = &outFile;
    }
    else {
        outFile.open(outfname);
        if (!outFile.is_open()) {
            std::cout << "wav2h - output file not open, printing to console instead";
            outStream = &std::cout;
            withCout = true;
        }
        else outStream = &outFile;
        *outStream << "#pragma once";
    }

    *outStream << "\n// AUTO-GENERATED BY WAV2H\n\n";

    double rate = audioFile.getSampleRate();
    *outStream << "#define " << nameUpper << "_SAMPLES " << std::to_string(numSamples) << "\n";
    *outStream << "#define " << nameUpper << "_RATE " << std::to_string(rate) << "\n";
    *outStream << "#define " << nameUpper << "_MULTIPLIER " << std::to_string(maxAbsVal * 256) << "\n";
    *outStream << "static char " << name << "[] = {\n";

    int counter = 0;
    char l, r;
    for (int i = 0; i < numSamples; i++) {
        l = AudioSampleConverter<double>::sampleToSignedByte(audioFile.samples[0][i]);
        //r = AudioSampleConverter<double>::sampleToSignedByte(audioFile.samples[lOrR][i]);
        *outStream << "    " << std::to_string(l) << ",";// << std::to_string(r) << ",";
        counter = ((counter + 1) % SAMPLES_PER_LINE);
        if (!counter) *outStream << "\n";
    }

    *outStream << "};\n";

    if (!withCout) {
        outFile.close();
    }

    return 0;
}